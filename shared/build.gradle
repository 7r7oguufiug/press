plugins {
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.70'
}

apply plugin: "com.android.library"
apply plugin: "kotlin-multiplatform"
apply plugin: "kotlin-android-extensions"
apply plugin: "com.squareup.sqldelight"
apply plugin: "org.jetbrains.kotlin.native.cocoapods"
apply plugin: "com.codingfeline.buildkonfig"

android {
  compileSdkVersion versions.compileSdk
  defaultConfig {
    minSdkVersion versions.minSdk
  }
}

sqldelight {
  PressDatabase {
    packageName = "me.saket.press"
    schemaOutputDirectory = file("src/commonMain/db/databases")
  }
}

kotlin {
  targets {
    fromPreset(presets.android, "android")
    fromPreset(presets.macosX64, "macos") {
      compilations.main.kotlinOptions.freeCompilerArgs += "-Xobjc-generics"
      binaries {
        framework("shared") {
          isStatic = false
          linkerOpts.add("-lsqlite3")
        }
      }
    }

    def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
    def iosTarget = (buildForDevice) ? presets.iosArm64 : presets.iosX64

    fromPreset(iosTarget, "ios") {
      binaries {
        compilations.main.kotlinOptions.freeCompilerArgs += "-Xobjc-generics"
        framework("shared") {
          isStatic = false
          linkerOpts.add("-lsqlite3")

          // Disable bitcode embedding for the simulator build.
          if (!buildForDevice) {
            embedBitcode("disable")
          }
        }
      }
    }
  }

  sourceSets {
    commonMain {
      dependencies {
        implementation kotlin('stdlib-common')
        implementation project(':wysiwyg')
        api project(':kgit')
        implementation deps.reaktive.core.common
        implementation deps.reaktive.interop.coroutines
        implementation deps.koin.core.common
        implementation deps.multiplatformUuid
        implementation deps.klock.common
        implementation deps.sqlDelight.runtime.common
        implementation deps.stately
        implementation deps.statelyConcurrency
        implementation deps.multiplatformSettings.core
        implementation deps.ktor.client.common
        implementation deps.ktor.kotlinxSerialization.common
        implementation deps.ktor.logger.common
        implementation deps.kotlinxSerialization.common
      }
    }
    commonTest {
      dependencies {
        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
        implementation deps.reaktive.testing.common
        implementation deps.reaktive.testing.utils
        implementation deps.multiplatformSettings.testing
        implementation deps.assertK.common
        implementation deps.assertK.opentest4j // https://youtrack.jetbrains.com/issue/IDEA-214533
        implementation deps.statelyCollections
      }
    }
    androidMain {
      dependencies {
        implementation kotlin('stdlib')
        implementation deps.androidx.appCompat
        implementation deps.androidx.preferences
        implementation deps.timber
        implementation deps.rx2.core
        implementation deps.reaktive.interop.rxJava2
        implementation deps.sqlDelight.driver.android
        implementation deps.ktor.client.okHttp
        implementation deps.ktor.kotlinxSerialization.jvm
        implementation deps.kotlinxSerialization.jvm
        implementation deps.ktor.logger.jvm
        implementation deps.okio
      }
    }
    androidTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
        implementation deps.androidx.test.jUnit
        implementation deps.robolectric
      }
    }
    nativeMain {
      dependencies {
        implementation deps.sqlDelight.driver.native
        implementation deps.ktor.client.native
        implementation deps.ktor.kotlinxSerialization.native
        implementation deps.ktor.logger.native
        implementation deps.kotlinxSerialization.native
      }
    }
    macosMain {
      dependsOn(nativeMain)
      dependencies {
        implementation deps.ktor.client.curl
      }
    }
    macosTest {}
    iosMain {
      dependsOn(nativeMain)
    }
    iosTest {}

    all {
      languageSettings {
        enableLanguageFeature('InlineClasses')
        useExperimentalAnnotation('kotlin.Experimental')
      }
    }
  }
}

kotlin.cocoapods {
  summary = "A cross-platform markdown editor"
  homepage = "https://github.com/saket/press"
}
version = 1.0 // also used by cocoapods plugin.

dependencies {}

buildkonfig {
  Properties secrets = new Properties()
  def secretsFile = new File('shared/secrets.properties')
  if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
  }

  packageName = "me.saket.press.shared"
  defaultConfigs {
    buildConfigField "String", "GITHUB_CLIENT_SECRET", secrets["github_client_secret"] ?: "nicolas_cage"
    buildConfigField "String", "GITHUB_SSH_PRIV_KEY", secrets["github_ssh_private_key"] ?: ""
  }
}

task checkiOS {
  def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
  dependsOn 'linkDebugTestIos'
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Runs tests for target 'ios' on an iOS simulator"

  doLast {
    def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
    exec {
      commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
    }
  }
}
tasks.check.dependsOn checkiOS
